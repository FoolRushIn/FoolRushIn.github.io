(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{525:function(t,s,a){"use strict";a.r(s);var n=a(4),v=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("strong",[t._v("创建型模式:(关注对象的创建过程)")])]),t._v(" "),a("p",[a("strong",[t._v("单例模式, 工厂模式, 抽象工厂模式, 建造者模式, 原型模式")])]),t._v(" "),a("p",[a("strong",[t._v("结构性模式:(关注对象和类的组织)")])]),t._v(" "),a("p",[a("strong",[t._v("适配器模式, 桥接模式, 装饰模式, 组合模式, 外观模式, 享元模式, 代理模式")])]),t._v(" "),a("p",[a("strong",[t._v("行为型模式(关注系统中对象之间的相互交互, 研究系统在运行时对象之间的相互通信和协作, 进一步明确对象的职责, 共有11中模式):")])]),t._v(" "),a("p",[a("strong",[t._v("模板方法模式,")]),t._v(" "),a("strong",[t._v("命令模式")]),t._v("**, 迭代器模式, 观察者模式, 中介者模式, 备忘录模式,** "),a("strong",[t._v("解释器模式")]),t._v("**, 状态模式, 策略模式, 职责链模式,** "),a("strong",[t._v("访问者模式")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/WfkvRI6GSg2oO43.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"创建型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[t._v("#")]),t._v(" "),a("strong",[t._v("创建型模式:")])]),t._v(" "),a("h3",{attrs:{id:"单例模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[t._v("#")]),t._v(" "),a("strong",[t._v("单例模式:")])]),t._v(" "),a("p",[a("strong",[t._v("核心作用:\t保证一个类只有一个实例, 并且提供一个访问该实例的全局访问点")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/1HXKphLOAJsrmq5.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("单例模式的优点：")])]),t._v(" "),a("p",[t._v("由于单例模式只生成一个实例，减少了系统性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决")]),t._v(" "),a("p",[t._v("单例模式可以在系统设置全局的访问点，优化环共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理")]),t._v(" "),a("p",[t._v("常见的五种单例模式实现方式：")]),t._v(" "),a("p",[a("strong",[t._v("主要：")])]),t._v(" "),a("ul",[a("li",[t._v("饿汉式（线程安全，调用效率高。 但是，不能延时加载。）")]),t._v(" "),a("li",[t._v("懒汉式（线程安全，调用效率不高。 但是，可以延时加载。）")])]),t._v(" "),a("p",[t._v("其他：")]),t._v(" "),a("ul",[a("li",[t._v("双重检测锁式（由于JVM底层内部模型原因，偶尔会出问题。不建议使用）")]),t._v(" "),a("li",[t._v("静态内部类式(线程安全，调用效率高。 但是，可以延时加载)")]),t._v(" "),a("li",[t._v("枚举单例(线程安全，调用效率高，不能延时加载)")])]),t._v(" "),a("p",[a("strong",[t._v("饿汉式实现（单例对象立即加载）")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo02")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*final*/")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo02")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo02")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo02")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//私有化构造器 ")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*synchronized*/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo02")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Client")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo02")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo02")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \t\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo02")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo02")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//结果为true ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("饿汉式单例模式代码中，static变量会在类装载时初始化，此时也不会涉及多个线程对象访问该对象的问题。虚拟机保证只会装载一次该类，肯定不会发生并发访问的问题。因此，可以省略synchronized关键字")]),t._v(" "),a("p",[a("strong",[t._v("懒汉式实现（单例对象延迟加载）")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo01")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo01")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo01")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//私有化构造器    ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo01")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                  \n            s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo01")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      \n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("            \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("要点：")]),t._v(" "),a("ul",[a("li",[t._v("lazy load!")]),t._v(" "),a("li",[t._v("延迟加载，  懒加载！  真正用的时候才加载！")])]),t._v(" "),a("p",[t._v("问题：")]),t._v(" "),a("p",[t._v("资源利用率高了。但是，每次调用getInstance()方法都要同步，并发效率较低。")]),t._v(" "),a("p",[a("strong",[t._v("双重检测锁实现")])]),t._v(" "),a("p",[a("strong",[t._v("这个模式将同步内容下方到if内部，提高了执行的效率不必每次获取对象时都进行同步，只有第一次才同步创建了以后就没必要了。")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// volatile声明作用即是内存变量共享的作用  ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton6")]),t._v(" instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造器私有化    ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 提供公有的获取方法  ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("           \n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("      \n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("     \n                    instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           \n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("          \n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("      \n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("      \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[a("strong",[t._v("问题：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("由于编译器优化原因和JVM底层内部模型原因，偶尔会出问题。不建议使用。")])])]),t._v(" "),a("p",[a("strong",[t._v("静态内部类实现方式(也是一种懒加载方式)")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo04")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonClassInstance")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo04")]),t._v(" instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo04")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \t \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo04")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonClassInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \t\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo04")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[a("strong",[t._v("要点：")])]),t._v(" "),a("ol",[a("li",[t._v("外部类没有static属性，则不会像饿汉式那样立即加载对象。")]),t._v(" "),a("li",[t._v("外部类初次加载，会初始化静态变量、静态代码块、静态方法，但不会加载内部类和静态内部类。")]),t._v(" "),a("li",[t._v("只有真正调用getInstance(),才会加载静态内部类。加载类时是线程 安全的。 instance是static final类型，保证了内存中只有这样一个实例存在，而且只能被赋值一次，从而保证了线程安全性.")]),t._v(" "),a("li",[t._v("兼备了并发高效调用和延迟加载的优势！")])]),t._v(" "),a("p",[a("strong",[t._v("问题：")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("反射可以破解上面几种(不包含枚举式)实现方式！（可以在构造方法中手动抛出异常控制）")])]),t._v(" "),a("li",[a("strong",[t._v("反序列化可以破解上面几种((不包含枚举式))实现方式！")]),t._v(" "),a("ol",[a("li",[t._v("可以通过定义readResolve()防止获得不同对象。")]),t._v(" "),a("li",[t._v("反序列化时，如果对象所在类定义了readResolve()，（实际是一种回调），定义返回哪个对象。")])])])]),t._v(" "),a("p",[a("strong",[t._v("使用枚举实现单例模式")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo05")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**    \n    * 定义一个枚举的元素，它就代表了Singleton的一个实例。 \n    */")]),t._v("  \n    INSTANCE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**    \n    * 单例可以有自己的操作  \n    */")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("singletonOperation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//功能处理   ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo05")]),t._v("  sd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo05")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("INSTANCE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo05")]),t._v("  sd2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SingletonDemo05")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("INSTANCE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sd"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("sd2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("p",[a("strong",[t._v("优点：")])]),t._v(" "),a("ul",[a("li",[t._v("实现简单")]),t._v(" "),a("li",[t._v("枚举本身就是单例模式。由JVM从根本上提供保障！避免通过反射和反序列化的漏洞！")])]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("ul",[a("li",[t._v("无延迟加载")]),t._v(" "),a("li",[t._v("常见的五种单例模式在多线程环境下的效率测试")])]),t._v(" "),a("p",[t._v("大家只要关注相对值即可。在不同的环境下不同的程序测得值完全不一样")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[a("strong",[t._v("饿汉式")])]),t._v(" "),a("th",[a("strong",[t._v("22ms")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("懒汉式")]),t._v(" "),a("td",[t._v("636ms")])]),t._v(" "),a("tr",[a("td",[t._v("静态内部类式")]),t._v(" "),a("td",[t._v("28ms")])]),t._v(" "),a("tr",[a("td",[t._v("枚举式")]),t._v(" "),a("td",[t._v("32ms")])]),t._v(" "),a("tr",[a("td",[t._v("双重检查锁式")]),t._v(" "),a("td",[t._v("65ms")])])])]),t._v(" "),a("p",[a("strong",[t._v("CountDownLatch")])]),t._v(" "),a("p",[a("strong",[t._v("同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待。")])]),t._v(" "),a("ol",[a("li",[t._v("countDown()  当前线程调此方法，则计数减一(建议放在 finally里执行)")]),t._v(" "),a("li",[t._v("await()，   调用此方法会一直阻塞当前线程，直到计时器的值为0")])]),t._v(" "),a("p",[a("strong",[t._v("常见的五种单例模式实现方式")])]),t._v(" "),a("p",[t._v("主要：")]),t._v(" "),a("ol",[a("li",[t._v("饿汉式（线程安全，调用效率高。 但是，不能延时加载。）")]),t._v(" "),a("li",[t._v("懒汉式（线程安全，调用效率不高。 但是，可以延时加载。）")])]),t._v(" "),a("p",[t._v("其他：")]),t._v(" "),a("ol",[a("li",[t._v("双重检测锁式（由于JVM底层内部模型原因，偶尔会出问题。不建议使用）")]),t._v(" "),a("li",[t._v("静态内部类式(线程安全，调用效率高。 但是，可以延时加载)")]),t._v(" "),a("li",[t._v("枚举式(线程安全，调用效率高，不能延时加载。并且可以天然的防止反射和反序列化漏洞！)")])]),t._v(" "),a("p",[a("strong",[t._v("如何选用?")])]),t._v(" "),a("ul",[a("li",[t._v("单例对象  占用  资源 少，不需要  延时加载：")]),t._v(" "),a("li",[t._v("枚举式 好于 饿汉式")]),t._v(" "),a("li",[t._v("单例对象  占用  资源 大，需要 延时加载：")]),t._v(" "),a("li",[t._v("静态内部类式 好于 懒汉式")])]),t._v(" "),a("h3",{attrs:{id:"工厂模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[t._v("#")]),t._v(" "),a("strong",[t._v("工厂模式：")])]),t._v(" "),a("p",[a("strong",[t._v("实现了创建者和调用者的分离。")])]),t._v(" "),a("p",[t._v("工厂模式分为简单工厂模式，工厂方法模式和抽象工厂模式，它们都属于设计模式中的创建型模式。其"),a("strong",[t._v("主要功能都是帮助我们把对象的实例化部分抽取了出来，目的是降低系统中代码耦合度")]),t._v("，并且增强了系统的扩展性。")]),t._v(" "),a("p",[t._v("详细分类：")]),t._v(" "),a("p",[a("strong",[t._v("简单工厂模式:")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("用来生产同一等级结构中的任意产品。（对于增加新的产品，需要修改已有代码）")])])]),t._v(" "),a("p",[a("strong",[t._v("工厂方法模式:")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("用来生产同一等级结构中的固定产品。（支持增加任意产品）")])])]),t._v(" "),a("p",[a("strong",[t._v("抽象工厂模式:")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）")])])]),t._v(" "),a("p",[t._v("面向对象设计的基本原则：")]),t._v(" "),a("ul",[a("li",[t._v("OCP（开闭原则，Open-Closed Principle）：一个软件的实体应当对扩展开放，对修改关闭。")]),t._v(" "),a("li",[t._v("DIP（依赖倒转原则，Dependence Inversion Principle）：要针对接口编程，不要针对实现编程。")]),t._v(" "),a("li",[t._v("LoD（迪米特法则，Law of Demeter）：只与你直接的朋友通信，而避免和陌生人通信。")])]),t._v(" "),a("p",[a("strong",[t._v("核心本质：")])]),t._v(" "),a("p",[a("strong",[t._v("实例化对象，用工厂方法代替new操作。")])]),t._v(" "),a("p",[a("strong",[t._v("将选择实现类、创建对象统一管理和控制。从而将调用者跟我们的实现类解耦。")])]),t._v(" "),a("p",[a("strong",[t._v("简单工厂模式要点：")]),a("a",{attrs:{href:"https://www.jianshu.com/p/d951ac56136e",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[t._v("https://www.cnblogs.com/zailushang1996/p/8601808.html")]),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("简单工厂模式也叫静态工厂模式，就是工厂类一般是使用静态方法，通过接收的参数的不同来返回不同的对象实例。")]),t._v(" "),a("p",[t._v("对于增加新产品无能为力！不修改代码的话，是无法扩展的。")]),t._v(" "),a("p",[a("strong",[t._v("工厂方法模式要点：")])]),t._v(" "),a("p",[t._v("为了避免简单工厂模式的缺点，不完全满足OCP。")]),t._v(" "),a("p",[t._v("工厂方法模式和简单工厂模式最大的不同在于，简单工厂模式只有一个（对于一个项目或者一个独立模块而言）工厂类，而工厂方法模式有一组实现了相同接口的工厂类。")]),t._v(" "),a("p",[t._v("工厂方法模式虽然在工厂类结构中引入了接口从而满足了OCP，但是在客户端编码中需要对工厂类进行实例化。而简单工厂模式的工厂类是个静态类，在客户端无需实例化，这无疑是个吸引人的优点。")]),t._v(" "),a("h3",{attrs:{id:"抽象工厂模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象工厂模式"}},[t._v("#")]),t._v(" "),a("strong",[t._v("抽象工厂模式")])]),t._v(" "),a("p",[t._v("用来生产不同产品族的全部产品。（对于增加新的产品，无能为力；支持增加产品族）")]),t._v(" "),a("p",[t._v("抽象工厂模式是工厂方法模式的升级版本，在有多个业务品种、业务分类时，通过抽象工厂模式产生\t需要的对象是一种非常好的解决方式。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/QMgoUhq2GPb9rya.png",alt:""}})]),t._v(" "),a("p",[t._v("根据实例可以描述为： 多个抽象产品类，每个抽象产品类可以派生出多个具体产品类。一个抽象工厂类，可以派生出多个具体工厂类。 每个具体工厂类可以创建多个具体产品类的实例。.")]),t._v(" "),a("h3",{attrs:{id:"建造者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建造者模式"}},[t._v("#")]),t._v(" "),a("strong",[t._v("建造者模式")])]),t._v(" "),a("p",[a("strong",[t._v("本质：")])]),t._v(" "),a("ol",[a("li",[t._v("分离了对象子组件的单独构造(由Builder来负责)和装配(由Director负责)。 从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况下使用。")]),t._v(" "),a("li",[t._v("由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用。")])]),t._v(" "),a("p",[a("strong",[t._v("原型模式prototype")])]),t._v(" "),a("ol",[a("li",[t._v("通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。")]),t._v(" "),a("li",[t._v("就是java中的克隆技术，以某个对象为原型，复制出新的对象。显然，新的对象具备原型对象的特点")]),t._v(" "),a("li",[t._v("优势有：效率高(直接克隆，避免了重新执行构造过程步骤) 。")]),t._v(" "),a("li",[t._v("克隆类似于new，但是不同于new。new创建新的对象属性采用的是默认值。克隆出的对象的属性值完全和原型对象相同。并且克隆出的新对象改变不会影响原型对象。然后，再修改克隆对象的值。")])]),t._v(" "),a("h3",{attrs:{id:"原型模式实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型模式实现"}},[t._v("#")]),t._v(" "),a("strong",[t._v("原型模式实现：")])]),t._v(" "),a("ol",[a("li",[t._v("Cloneable接口和clone方法")]),t._v(" "),a("li",[t._v("Prototype模式中实现起来最困难的地方就是内存复制操作，所幸在Java中提供了clone()方法替我们做了绝大部分事情。")])]),t._v(" "),a("p",[a("strong",[t._v("浅克隆存在的问题")])]),t._v(" "),a("p",[t._v("被复制的对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用都仍然指向原来的\t对象。")]),t._v(" "),a("p",[a("strong",[t._v("深克隆如何实现?")])]),t._v(" "),a("p",[t._v("深克隆把引用的变量指向复制过的新对象，而不是原有的被引用的对象。")]),t._v(" "),a("p",[t._v("深克隆：让已实现Clonable接口的类中的属性也实现Clonable接口")]),t._v(" "),a("p",[t._v("基本数据类型和String能够自动实现深度克隆（值的复制）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/UkgbI41pNKZFBWv.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"结构型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[t._v("#")]),t._v(" "),a("strong",[t._v("结构型模式：")])]),t._v(" "),a("p",[a("strong",[t._v("核心作用：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("是从程序的结构上实现松耦合，从而可以扩大整体的类结构，用来解决更大的问题。")])])]),t._v(" "),a("p",[a("strong",[t._v("分类：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("适配器模式、代理模式、桥接模式、装饰模式、组合模式、外观模式、享元模式")])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("代理模式")]),t._v(" "),a("th",[t._v("为真实对象提供一个代理，从而控制对真实对象的访问")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("适配模式")]),t._v(" "),a("td",[t._v("使原本由于接口不兼容不能一起工作的类可以一起工作")])]),t._v(" "),a("tr",[a("td",[t._v("桥接模式")]),t._v(" "),a("td",[t._v("处理多层继承结构，处理多维度变化的场景，将各个维度设计成独立的继承结构，使各个维度可以独立的扩展在抽象层建立关联。")])]),t._v(" "),a("tr",[a("td",[t._v("组合模式")]),t._v(" "),a("td",[t._v("将对象组合成树状结构以表示”部分和整体”层次结构，使得客户可以统一的调用叶子对象和容器对象")])]),t._v(" "),a("tr",[a("td",[t._v("装饰模式")]),t._v(" "),a("td",[t._v("动态地给一个对象添加额外的功能，比继承灵活")])]),t._v(" "),a("tr",[a("td",[t._v("外观模式")]),t._v(" "),a("td",[t._v("为子系统提供统一的调用接口，使得子系统更加容易使用")])]),t._v(" "),a("tr",[a("td",[t._v("享元模式")]),t._v(" "),a("td",[t._v("运用共享技术有效的实现管理大量细粒度对象，节省内存，提高效率")])])])]),t._v(" "),a("h3",{attrs:{id:"适配器adapter模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适配器adapter模式"}},[t._v("#")]),t._v(" "),a("strong",[t._v("适配器adapter模式")])]),t._v(" "),a("p",[a("strong",[t._v("什么是适配器模式?")])]),t._v(" "),a("p",[t._v("将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。")]),t._v(" "),a("p",[a("strong",[t._v("模式中的角色")])]),t._v(" "),a("ol",[a("li",[t._v("目标接口（Target）：客户所期待的接口。目标可以是具体的或抽象的类，也可以是接口。")]),t._v(" "),a("li",[t._v(".需要适配的类（Adaptee）：需要适配的类或适配者类。")]),t._v(" "),a("li",[t._v("适配器（Adapter）：通过包装一个需要适配的对象，把原接口转换成目标接口。")])]),t._v(" "),a("p",[a("strong",[t._v("适配器模式使用")])]),t._v(" "),a("p",[t._v("java适配器模式有两种，类适配器和对象适配器")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("类适配器demo")]),t._v(" "),a("ul",[a("li",[t._v("类适配器主要是使用继承的方式连接两个接口")])])]),t._v(" "),a("li",[a("strong",[t._v("对象适配器demo")]),t._v(" "),a("ul",[a("li",[t._v("上面的类适配器用的是“继承”的方式去连接，这里的对象适配器用的是“组合”的方式。")])])])]),t._v(" "),a("h3",{attrs:{id:"代理模式-proxy-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代理模式-proxy-pattern"}},[t._v("#")]),t._v(" "),a("strong",[t._v("代理模式(Proxy  pattern)：")])]),t._v(" "),a("p",[a("strong",[t._v("核心作用：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("通过代理，控制对对象的访问！")])]),t._v(" "),a("li",[a("strong",[t._v("可以详细控制访问某个（某类）对象的方法")]),t._v("，在调用这个方法前做前置处理，调用这个方法后做后置处理。（即：AOP的微观实现！）")])]),t._v(" "),a("p",[a("strong",[t._v("AOP(Aspect  Oriented  Programming面向切面编程)的核心实现机制！")])]),t._v(" "),a("p",[a("strong",[t._v("核心角色：")])]),t._v(" "),a("ol",[a("li",[a("em",[t._v("抽象角色:")]),t._v("*\n"),a("ol",[a("li",[t._v("定义代理角色和真实角色的公共对外方法")])])]),t._v(" "),a("li",[a("strong",[t._v("真实角色:")]),t._v(" "),a("ol",[a("li",[t._v("实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。")]),t._v(" "),a("li",[t._v("关注真正的业务逻辑！")])])]),t._v(" "),a("li",[a("strong",[t._v("代理角色:")]),t._v(" "),a("ol",[a("li",[t._v("实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。")]),t._v(" "),a("li",[t._v("将统一的流程控制放到代理角色中处理！")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/6KOLsWc5Xdvjzho.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("应用场景：")])]),t._v(" "),a("p",[t._v("**安全代理：**屏蔽对真实角色的直接访问。")]),t._v(" "),a("p",[t._v("**远程代理：**通过代理类处理远程方法调用(RMI)")]),t._v(" "),a("p",[t._v("**延迟加载：**先加载轻量级的代理对象，真正需要再加载真实对象。")]),t._v(" "),a("p",[t._v("比如你要开发一个大文档查看软件，大文档中有大的图片，有可能一个图片有100MB，在打开文件时不可能将所有的图片都显示出来，这样就可以使用代理模式，当需要查看图片时，用proxy来进行大图片的打开。")]),t._v(" "),a("p",[a("strong",[t._v("分类：")])]),t._v(" "),a("p",[a("strong",[t._v("静态代理(静态定义代理类)")])]),t._v(" "),a("p",[a("strong",[t._v("动态代理(动态生成代理类)")])]),t._v(" "),a("ol",[a("li",[t._v("JDK自带的动态代理")]),t._v(" "),a("li",[t._v("javaassist字节码操作库实现")]),t._v(" "),a("li",[t._v("CGLIB")]),t._v(" "),a("li",[t._v("ASM(底层使用指令，可维护性较差)")])]),t._v(" "),a("p",[a("strong",[t._v("JDK自带的动态代理:")])]),t._v(" "),a("p",[a("strong",[t._v("java.lang.reflect.Proxy")])]),t._v(" "),a("p",[t._v("作用：动态生成代理类和对象")]),t._v(" "),a("p",[a("strong",[t._v("java.lang.reflect.InvocationHandler(处理器接口)")])]),t._v(" "),a("ol",[a("li",[t._v("可以通过invoke方法实现对真实角色的代理访问。")]),t._v(" "),a("li",[t._v("每次通过Proxy生成代理类对象对象时都要指定对应的处理器对象")])]),t._v(" "),a("p",[a("strong",[t._v("常用术语：")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("切面（Aspect）：其实就是共有功能的实现。")])]),t._v(" "),a("li",[a("p",[t._v("通知（Advice）：是切面的具体实现。")])]),t._v(" "),a("li",[a("p",[t._v("连接点（Joinpoint）：就是程序在运行过程中能够插入切面的地点。")])]),t._v(" "),a("li",[a("p",[t._v("切入点（Pointcut）：用于定义通知应该切入到哪些连接点上。")])]),t._v(" "),a("li",[a("p",[t._v("目标对象（Target）：就是那些即将切入切面的对象，也就是那些被通知的对象")])]),t._v(" "),a("li",[a("p",[t._v("代理对象（Proxy）：将通知应用到目标对象之后被动态创建的对象。")])]),t._v(" "),a("li",[a("p",[t._v("织入（Weaving）：将切面应用到目标对象从而创建一个新的代理对象的过程。")])])]),t._v(" "),a("p",[a("strong",[t._v("开源的AOP框架:")])]),t._v(" "),a("p",[a("strong",[t._v("AspectJ")])]),t._v(" "),a("h3",{attrs:{id:"桥接模式-bridge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式-bridge"}},[t._v("#")]),t._v(" "),a("strong",[t._v("桥接模式(bridge)")])]),t._v(" "),a("p",[a("strong",[t._v("场景")])]),t._v(" "),a("p",[t._v("商城系统中常见的商品分类，以电脑为类，如何良好的处理商品分类销售的问题?")]),t._v(" "),a("p",[t._v("我们可以用多层继承结构实现下图的关系。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/nVfMzJqaiSvPlYF.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("问题：")])]),t._v(" "),a("p",[a("strong",[t._v("扩展性问题(类个数膨胀问题)：")])]),t._v(" "),a("p",[t._v("如果要增加一个新的电脑类型:智能手机，则要增加各个品牌下面的类。")]),t._v(" "),a("p",[t._v("如果要增加一个新的品牌，也要增加各种电脑类型的类。")]),t._v(" "),a("p",[a("strong",[t._v("违反单一职责原则：")])]),t._v(" "),a("p",[t._v("一个类：联想笔记本，有两个引起这个类变化的原因")]),t._v(" "),a("p",[a("strong",[t._v("桥接模式核心要点：")])]),t._v(" "),a("p",[t._v("处理多层继承结构，处理多维度变化的场景，将各个维度设计成独立的继承结构，使各个维度可以独立的扩展在抽象层建立关联。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/tZgcam6IK7X3AV2.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("桥接模式实际开发中应用场景")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("JDBC驱动程序")]),t._v(" "),a("ul",[a("li",[t._v("AWT中的Peer架构")])])]),t._v(" "),a("li",[a("p",[t._v("银行日志管理：")]),t._v(" "),a("ul",[a("li",[t._v("格式分类：操作日志、交易日志、异常日志")]),t._v(" "),a("li",[t._v("距离分类：本地记录日志、异地记录日志")])])]),t._v(" "),a("li",[a("p",[t._v("人力资源系统中的奖金计算模块：")]),t._v(" "),a("ul",[a("li",[t._v("奖金分类：个人奖金、团体奖金、激励奖金。")]),t._v(" "),a("li",[t._v("部门分类：人事部门、销售部门、研发部门。")])])]),t._v(" "),a("li",[a("p",[t._v("OA系统中的消息处理：")]),t._v(" "),a("ul",[a("li",[t._v("业务类型：普通消息、加急消息、特急消息")]),t._v(" "),a("li",[t._v("发送消息方式：系统内消息、手机短信、邮件")])])])]),t._v(" "),a("h3",{attrs:{id:"组合模式-composite"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合模式-composite"}},[t._v("#")]),t._v(" "),a("strong",[t._v("组合模式(composite)")])]),t._v(" "),a("p",[a("strong",[t._v("合成模式属于对象的结构模式，有时又叫做“部分——整体”模式。合成模式将对象组织到树结构中，可以用来描述整体与部分的关系。合成模式可以使客户端将单纯元素与复合元素同等看待。")])]),t._v(" "),a("p",[a("strong",[t._v("使用组合模式的场景：")])]),t._v(" "),a("p",[a("strong",[t._v("把部分和整体的关系用树形结构来表示")]),t._v("，从而使客户端可以使用统一的方式处理部分对象和整体对象。")]),t._v(" "),a("p",[a("strong",[t._v("组合模式核心：")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("抽象构件(Component)角色:")]),t._v(" \t\t定义了叶子和容器构件的共同点")]),t._v(" "),a("li",[a("strong",[t._v("叶子(Leaf)构件角色：")]),t._v("\t\t\t无子节点")]),t._v(" "),a("li",[a("strong",[t._v("容器(Composite)构件角色：")]),t._v("\t\t有容器特征，可以包含子节点")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/BniqaGkfFdo1XS4.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("组合模式工作流程分析：")])]),t._v(" "),a("p",[t._v("组合模式为处理树形结构提供了完美的解决方案，描述了如何将容器和叶子进行递归组合，使得用户在使用时可以一致性的对待容器和叶子。")]),t._v(" "),a("p",[t._v("当容器对象的指定方法被调用时，将遍历整个树形结构，寻找也包含这个方法的成员，并调用执行。其中，使用了递归调用的机制对整个结构进行处理。")]),t._v(" "),a("p",[a("strong",[t._v("开发中的应用场景：")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("操作系统的资源管理器")])]),t._v(" "),a("li",[a("p",[t._v("GUI中的容器层次图")])]),t._v(" "),a("li",[a("p",[t._v("XML文件解析")])]),t._v(" "),a("li",[a("p",[t._v("OA系统中，组织结构的处理")])]),t._v(" "),a("li",[a("p",[t._v("Junit单元测试框架")]),t._v(" "),a("ul",[a("li",[t._v("底层设计就是典型的组合模式，TestCase(叶子)、TestUnite(容器)、Test接口(抽象)")])])])]),t._v(" "),a("p",[a("strong",[t._v("Junit单元测试框架底层设计")])]),t._v(" "),a("p",[t._v("底层设计就是典型的组合模式，TestCase(叶子)、TestUnite(容器)、Test接口(抽象)")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/uMKVstUIYOXyRrn.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"装饰模式-decorator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰模式-decorator"}},[t._v("#")]),t._v(" "),a("strong",[t._v("装饰模式(decorator)")])]),t._v(" "),a("p",[a("strong",[t._v("职责：")])]),t._v(" "),a("ol",[a("li",[t._v("动态的为一个对象增加新的功能。")]),t._v(" "),a("li",[t._v("装饰模式是一种用于代替继承的技术，"),a("strong",[t._v("无须通过继承增加子类就能扩展对象的新功能")]),t._v("。使用对象的关联关系代替继承关系，更加灵活，"),a("strong",[t._v("同时避免类型体系的快速膨胀。")])])]),t._v(" "),a("p",[a("strong",[t._v("实现细节：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Component抽象构件角色：")]),t._v(" "),a("ul",[a("li",[t._v("真实对象和装饰对象有相同的接口。这样，客户端对象就能够以与真实对象相同的方式同装饰对象交互。")])])]),t._v(" "),a("li",[a("strong",[t._v("ConcreteComponent 具体构件角色(真实对象)：")]),t._v(" "),a("ul",[a("li",[t._v("io流中的FileInputStream、FileOutputStream")])])]),t._v(" "),a("li",[a("strong",[t._v("Decorator装饰角色：")]),t._v(" "),a("ul",[a("li",[t._v("持有一个抽象构件的引用。装饰对象接受所有客户端的请求，并把这些请求转发给真实的对象。这样，就能在真实对象调用前后增加新的功能。")])])]),t._v(" "),a("li",[a("strong",[t._v("ConcreteDecorator具体装饰角色：")]),t._v(" "),a("ul",[a("li",[t._v("负责给构件对象增加新的责任。")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/9GrZ57vV6ADgpJu.png",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/Zgsb9tTCKWJYu28.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("开发中使用的场景：")])]),t._v(" "),a("ol",[a("li",[t._v("IO中输入流和输出流的设计")]),t._v(" "),a("li",[t._v("Swing包中图形界面构件功能")]),t._v(" "),a("li",[t._v("Servlet API 中提供了一个request对象的Decorator设计模式的默认实现类\tHttpServletRequestWrapper，HttpServletRequestWrapper 类，增强了request对象的功能。")]),t._v(" "),a("li",[t._v("Struts2中，request，response,session对象的处理")])]),t._v(" "),a("p",[a("strong",[t._v("IO流实现细节：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Component抽象构件角色：")]),t._v(" "),a("ul",[a("li",[t._v("io流中的InputStream、OutputStream、Reader、Writer")])])]),t._v(" "),a("li",[a("strong",[t._v("ConcreteComponent 具体构件角色：")]),t._v(" "),a("ul",[a("li",[t._v("io流中的FileInputStream、FileOutputStream")])])]),t._v(" "),a("li",[a("strong",[t._v("Decorator装饰角色：")]),t._v(" "),a("ul",[a("li",[t._v("持有一个抽象构件的引用：io流中的FilterInputStream、FilterOutputStream")])])]),t._v(" "),a("li",[a("strong",[t._v("ConcreteDecorator具体装饰角色：")]),t._v(" "),a("ul",[a("li",[t._v("负责给构件对象增加新的责任。Io流中的BufferedOutputStream、BufferedInputStream等。")])])])]),t._v(" "),a("p",[a("strong",[t._v("总结：")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("装饰模式（Decorator）也叫包装器模式（Wrapper）")])]),t._v(" "),a("li",[a("strong",[t._v("装饰模式降低系统的耦合度，可以动态的增加或删除对象的职责，并使得需要装饰的具体构建类和具体装饰类可以独立变化，以便增加新的具体构建类和具体装饰类。")])])]),t._v(" "),a("p",[a("strong",[t._v("优点:")])]),t._v(" "),a("ol",[a("li",[t._v("扩展对象功能，比继承灵活，不会导致类个数急剧增加")]),t._v(" "),a("li",[t._v("可以对一个对象进行多次装饰，创造出不同行为的组合，得到功能更加强大的对象")]),t._v(" "),a("li",[t._v("具体构建类和具体装饰类可以独立变化，用户可以根据需要自己增加新的具体构件子类和具体装饰子类。")])]),t._v(" "),a("p",[a("strong",[t._v("缺点:")])]),t._v(" "),a("ol",[a("li",[t._v("产生很多小对象。大量小对象占据内存，一定程度上影响性能。")]),t._v(" "),a("li",[t._v("装饰模式易于出错，调试排查比较麻烦。")])]),t._v(" "),a("p",[a("strong",[t._v("装饰模式和桥接模式的区别：")])]),t._v(" "),a("p",[t._v("两个模式都是为了解决过多子类对象问题。但他们の诱因不一样。桥模式是对象自身现有机制沿着多个维度变化，是既有部分不稳定。装饰模式是为了增加新的功能。")]),t._v(" "),a("h3",{attrs:{id:"外观模式-facade"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外观模式-facade"}},[t._v("#")]),t._v(" "),a("strong",[t._v("外观模式 facade")])]),t._v(" "),a("p",[a("strong",[t._v("迪米特法则(最少知识原则)：")])]),t._v(" "),a("p",[t._v("一个软件实体应当尽可能少的与其他实体发生相互作用。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/pNEbVDvrqS3iWkO.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("外观模式核心：")])]),t._v(" "),a("p",[t._v("为子系统提供统一的入口。封装子系统的复杂性，便于客户端调用。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/lKeZSDsIHCgypLv.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"享元模式-flyweight"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#享元模式-flyweight"}},[t._v("#")]),t._v(" "),a("strong",[t._v("享元模式(FlyWeight)")])]),t._v(" "),a("p",[a("strong",[t._v("场景：")])]),t._v(" "),a("p",[t._v("内存属于稀缺资源，不要随便浪费。如果有很多个完全相同或相似的对象，我们可以通过享元模式，节省内存。")]),t._v(" "),a("p",[a("strong",[t._v("核心：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("享元模式以共享的方式高效地支持大量细粒度对象的重用")])]),t._v(" "),a("li",[a("strong",[t._v("享元对象能做到共享的关键是区分了内部状态和外部状态。")]),t._v(" "),a("ul",[a("li",[t._v("内部状态：可以共享，不会随环境变化而改变")]),t._v(" "),a("li",[t._v("外部状态：不可以共享，会随环境变化而改变")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/EvfiVAhnYrZoyPp.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("享元模式实现：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("FlyweightFactory享元工厂类:")]),t._v(" "),a("ul",[a("li",[t._v("创建并管理享元对象，享元池一般设计成键值对")])])]),t._v(" "),a("li",[a("strong",[t._v("FlyWeight抽象享元类:")]),t._v(" "),a("ul",[a("li",[t._v("通常是一个接口或抽象类，声明公共方法，这些方法可以向外界提供对象的内部状态，设置外部状态。")])])]),t._v(" "),a("li",[a("strong",[t._v("ConcreteFlyWeight具体享元类:")]),t._v(" "),a("ul",[a("li",[t._v("为内部状态提供成员变量进行存储")])])]),t._v(" "),a("li",[a("strong",[t._v("UnsharedConcreteFlyWeight非共享享元类:")]),t._v(" "),a("ul",[a("li",[t._v("不能被共享的子类可以设计为非共享享元类")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/u6RL9g3GvT7orZP.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("享元模式开发中应用的场景：")])]),t._v(" "),a("ol",[a("li",[t._v("享元模式由于其共享的特性，可以在任何“池”中操作，比如：线程池、数据库连接池。")]),t._v(" "),a("li",[t._v("String类的设计也是享元模式")])]),t._v(" "),a("p",[a("strong",[t._v("优点:")])]),t._v(" "),a("ol",[a("li",[t._v("极大减少内存中对象的数量")]),t._v(" "),a("li",[t._v("相同或相似对象内存中只存一份，极大的节约资源，提高系统性能")]),t._v(" "),a("li",[t._v("外部状态相对独立，不影响内部状态")])]),t._v(" "),a("p",[a("strong",[t._v("缺点:")])]),t._v(" "),a("ol",[a("li",[t._v("模式较复杂，使程序逻辑复杂化")]),t._v(" "),a("li",[t._v("为了节省内存，共享了内部状态，分离出外部状态，而读取外部状态使运行时间变长。用时间换取了空间。")])]),t._v(" "),a("h2",{attrs:{id:"行为型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式"}},[t._v("#")]),t._v(" "),a("strong",[t._v("行为型模式")])]),t._v(" "),a("h3",{attrs:{id:"责任链模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#责任链模式"}},[t._v("#")]),t._v(" "),a("strong",[t._v("责任链模式:")])]),t._v(" "),a("p",[a("strong",[t._v("定义：")])]),t._v(" "),a("p",[t._v("将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，链上的对象逐个判断是否有能力处理该请求，如果能则处理，如果不能则传递给链上的下一个对象。")]),t._v(" "),a("p",[a("strong",[t._v("场景：")])]),t._v(" "),a("ul",[a("li",[t._v("打牌时，轮流出牌")]),t._v(" "),a("li",[t._v("接力赛跑")]),t._v(" "),a("li",[t._v("大学中，奖学金审批")]),t._v(" "),a("li",[t._v("公司中，公文审批")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/QZNJAHt7xsuqyUp.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("添加新的处理对象：")])]),t._v(" "),a("p",[t._v("由于责任链的创建完全在客户端，因此新增新的具体处理者对原有类库没有任何影响，只需添加新的类，然后在客户端调用时添加即可。符合开闭原则。")]),t._v(" "),a("p",[a("strong",[t._v("案例：")])]),t._v(" "),a("p",[t._v("我们可以在请假处理流程中，增加新的“副总经理”角色，审批大于等于10天，小于20天的请假。审批流程变为：")]),t._v(" "),a("ol",[a("li",[t._v("如果请假天数小于3天，主任审批")]),t._v(" "),a("li",[t._v("如果请假天数大于等于3天，小于10天，经理审批")]),t._v(" "),a("li",[t._v("大于等于10天，小于20天的请假，副总经理审批")]),t._v(" "),a("li",[t._v("如果大于等于20天，小于30天，总经理审批")]),t._v(" "),a("li",[t._v("如果大于等于30天，提示拒绝")])]),t._v(" "),a("p",[a("strong",[t._v("链表方式定义职责链(上一个案例)")])]),t._v(" "),a("p",[a("strong",[t._v("非链表方式实现职责链")])]),t._v(" "),a("p",[t._v("通过集合、数组生成职责链更加实用！实际上，很多项目中，每个具体的Handler并不是由开发团队定义的，而是项目上线后由外部单位追加的，所以使用链表方式定义COR链就很困难。")]),t._v(" "),a("p",[a("strong",[t._v("开发中常见的场景：")])]),t._v(" "),a("ol",[a("li",[t._v("Java中，异常机制就是一种责任链模式。一个try可以对应多个catch，当第一个catch不匹配类型，则自动跳到第二个catch.")]),t._v(" "),a("li",[t._v("Javascript语言中，事件的冒泡和捕获机制。Java语言中，事件的处理采用观察者模式。")]),t._v(" "),a("li",[t._v("Servlet开发中，过滤器的链式处理")]),t._v(" "),a("li",[t._v("Struts2中，拦截器的调用也是典型的责任链模式")])]),t._v(" "),a("h3",{attrs:{id:"迭代器模式-iterator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器模式-iterator"}},[t._v("#")]),t._v(" "),a("strong",[t._v("迭代器模式 iterator")])]),t._v(" "),a("p",[a("strong",[t._v("场景：")])]),t._v(" "),a("ul",[a("li",[t._v("提供一种可以遍历聚合对象的方式。又称为：游标cursor模式")]),t._v(" "),a("li",[t._v("聚合对象：存储数据")]),t._v(" "),a("li",[t._v("迭代器：遍历数据")])]),t._v(" "),a("p",[a("strong",[t._v("结构")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("聚合对象：存储数据")]),t._v(" "),a("li",[t._v("迭代器：遍历数据")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/mvNRwkQHgAOprlo.png",alt:""}})]),t._v(" "),a("p",[t._v("将迭代器作为内部类, 可以直接使用外部类的属性")]),t._v(" "),a("p",[a("strong",[t._v("基本案例：")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("实现正向遍历的迭代器")])]),t._v(" "),a("li",[a("p",[t._v("实现逆向遍历的迭代器")])])]),t._v(" "),a("p",[a("strong",[t._v("开发中常见的场景：")])]),t._v(" "),a("p",[t._v("JDK内置的迭代器(List/Set)")]),t._v(" "),a("h3",{attrs:{id:"中介者模式-mediator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式-mediator"}},[t._v("#")]),t._v(" "),a("strong",[t._v("中介者模式 Mediator")])]),t._v(" "),a("p",[a("strong",[t._v("场景(中介大家熟悉吗?房产中介?)：")])]),t._v(" "),a("ul",[a("li",[t._v("假如没有总经理。下面三个部门：财务部、市场部、研发部。财务部要发工资，让大家核对公司需要跟市场部和研发部都通气；市场部要接个新项目，需要研发部处理技术、需要财务部出资金。市场部跟各个部门打交道。  虽然只有三个部门，但是关系非常乱。")]),t._v(" "),a("li",[t._v("实际上，公司都有总经理。各个部门有什么事情都通报到总经理这里，总经理再通知各个相关部门。")])]),t._v(" "),a("p",[t._v("这就是一个典型的“中介者模式”总经理起到一个中介、协调的作用")]),t._v(" "),a("p",[a("strong",[t._v("核心：")])]),t._v(" "),a("p",[t._v("如果一个系统中对象之间的联系呈现为网状结构，对象之间存在大量多对多关系，将导致关系及其复杂，这些对象称为“同事对象”")]),t._v(" "),a("p",[t._v("我们可以引入一个中介者对象，使各个同事对象只跟中介者对象打交道，将复杂的网络结构化解为如下的星形结构。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/VcqUeh6ARpFmvaD.png",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/EjPh65JuGOpAfLr.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("中介者模式的本质：")])]),t._v(" "),a("p",[t._v("解耦多个同事对象之间的交互关系。每个对象都持有中介者对象的引用，只跟中介者对象打交道。我们通过中介者对象统一管理这些交互关系")]),t._v(" "),a("p",[a("strong",[t._v("开发中常见的场景：")])]),t._v(" "),a("ol",[a("li",[t._v("MVC模式(其中的C，控制器就是一个中介者对象。M和V都和他打交道)")]),t._v(" "),a("li",[t._v("窗口游戏程序，窗口软件开发中窗口对象也是一个中介者对象")]),t._v(" "),a("li",[t._v("图形界面开发GUI中，多个组件之间的交互，可以通过引入一个中介者对象来解决，可以是整体的窗口对象或者DOM对象")]),t._v(" "),a("li",[t._v("Java.lang.reflect.Method#invoke()")])]),t._v(" "),a("h3",{attrs:{id:"命令模式-command"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令模式-command"}},[t._v("#")]),t._v(" "),a("strong",[t._v("命令模式 command")])]),t._v(" "),a("p",[a("strong",[t._v("介绍：")])]),t._v(" "),a("p",[t._v("命令模式：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。也称之为：动作Action模式、事务transaction模式")]),t._v(" "),a("p",[a("strong",[t._v("结构：")])]),t._v(" "),a("ul",[a("li",[t._v("Command抽象命令类")]),t._v(" "),a("li",[t._v("ConcreteCommand具体命令类")]),t._v(" "),a("li",[t._v("Invoker调用者/请求者")])]),t._v(" "),a("p",[t._v("请求的发送者，它通过命令对象来执行请求。一个调用者并不需要在设计时确定其接收者，因此它只与抽象命令类之间存在关联。在程序运行时，将调用命令对象的execute()，间接调用接收者的相关操作。")]),t._v(" "),a("ul",[a("li",[t._v("Receiver接收者\n"),a("ul",[a("li",[t._v("接收者执行与请求相关的操作，具体实现对请求的业务处理。")]),t._v(" "),a("li",[t._v("未抽象前，实际执行操作内容的对象。")])])]),t._v(" "),a("li",[t._v("Client客户类\n"),a("ul",[a("li",[t._v("在客户类中需要创建调用者对象、具体命令类对象，在创建具体命令对象时指定对应的接收者。发送者和接收者之间没有直接关系，都通过命令对象间接调用。")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/cJdQ2WI9uLXi6eN.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("开发中常见的场景：")])]),t._v(" "),a("ol",[a("li",[t._v("Struts2中，action的整个调用过程中就有命令模式。")]),t._v(" "),a("li",[t._v("数据库事务机制的底层实现")]),t._v(" "),a("li",[t._v("命令的撤销和恢复")])]),t._v(" "),a("h3",{attrs:{id:"解释器模式-interpreter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解释器模式-interpreter"}},[t._v("#")]),t._v(" "),a("strong",[t._v("解释器模式 Interpreter")])]),t._v(" "),a("p",[a("strong",[t._v("解释器模式是类的行为模式。给定一个语言之后，解释器模式可以定义出其文法的一种表示，并同时提供一个解释器。客户端可以使用这个解释器来解释这个语言中的句子。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/xl9MmZRaq82Y5Ez.png",alt:""}})]),t._v(" "),a("ol",[a("li",[t._v("抽象表达式(Expression)角色：\n"),a("ol",[a("li",[t._v("声明一个所有的具体表达式角色都需要实现的抽象接口。这个接口主要是一个interpret()方法，称做解释操作。")])])]),t._v(" "),a("li",[t._v("终结符表达式(Terminal Expression)角色：\n"),a("ol",[a("li",[t._v("实现了抽象表达式角色所要求的接口，主要是一个interpret()方法；文法中的每一个终结符都有一个具体终结表达式与之相对应。比如有一个简单的公式R=R1+R2，在里面R1和R2就是终结符，对应的解析R1和R2的解释器就是终结符表达式。")])])]),t._v(" "),a("li",[t._v("非终结符表达式(Nonterminal Expression)角色：\n"),a("ol",[a("li",[t._v('文法中的每一条规则都需要一个具体的非终结符表达式，非终结符表达式一般是文法中的运算符或者其他关键字，比如公式R=R1+R2中，“+"就是非终结符，解析“+”的解释器就是一个非终结符表达式。')])])]),t._v(" "),a("li",[t._v("环境(Context)角色：\n"),a("ol",[a("li",[t._v("这个角色的任务一般是用来存放文法中各个终结符所对应的具体值，比如R=R1+R2，我们给R1赋值100，给R2赋值200。这些信息需要存放到环境角色中，很多情况下我们使用Map来充当环境角色就足够了。")])])])]),t._v(" "),a("h3",{attrs:{id:"访问者模式-visitor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问者模式-visitor"}},[t._v("#")]),t._v(" "),a("strong",[t._v("访问者模式 Visitor")])]),t._v(" "),a("p",[a("strong",[t._v("封装某些作用于某种数据结构中各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/Y8aXsuJGilMx2cU.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("**抽象访问者(Visitor)角色：**声明了一个或者多个方法操作，形成所有的具体访问者角色必须实现的接口。")]),t._v(" "),a("li",[t._v("**具体访问者(ConcreteVisitor)角色：**实现抽象访问者所声明的接口，也就是抽象访问者所声明的各个访问操作。")]),t._v(" "),a("li",[t._v("**抽象节点(Node)角色：**声明一个接受操作，接受一个访问者对象作为一个参数。")]),t._v(" "),a("li",[t._v("**具体节点(ConcreteNode)角色：**实现了抽象节点所规定的接受操作。")]),t._v(" "),a("li",[t._v("**结构对象(ObjectStructure)角色：**有如下的责任，可以遍历结构中的所有元素；如果需要，提供一个高层次的接口让访问者对象可以访问每一个元素；如果需要，可以设计成一个复合对象或者一个聚集，如List或Set。")])]),t._v(" "),a("h3",{attrs:{id:"策略模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[t._v("#")]),t._v(" "),a("strong",[t._v("策略模式")])]),t._v(" "),a("p",[a("strong",[t._v("策略模式对应于解决某一个问题的一个算法族，允许用户从该算法族中任选一个算法解决某一问题，同时可以方便的更换算法或者增加新的算法。并且由客户端决定调用哪个算法。")])]),t._v(" "),a("p",[a("strong",[t._v("场景：")])]),t._v(" "),a("p",[t._v("某个市场人员接到单后的报价策略(CRM系统中常见问题)。报价策略很复杂，可以简单作如下分类：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("普通客户小批量报价")])]),t._v(" "),a("li",[a("p",[t._v("普通客户大批量报价")])]),t._v(" "),a("li",[a("p",[t._v("老客户小批量报价")])]),t._v(" "),a("li",[a("p",[t._v("老客户大批量报价")])])]),t._v(" "),a("p",[t._v("具体选用哪个报价策略，这需要根据实际情况来确定。这时候，我们采用策略模式即可。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/PYSRZ7gwdkrH1qD.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("本质:")]),t._v("\t分离算法, 选择实现")]),t._v(" "),a("h3",{attrs:{id:"模板方法模式-template-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式-template-method"}},[t._v("#")]),t._v(" "),a("strong",[t._v("模板方法模式 template method")])]),t._v(" "),a("p",[t._v("知道骨架, 但是不知道具体细节")]),t._v(" "),a("p",[a("strong",[t._v("场景：")])]),t._v(" "),a("p",[t._v("客户到银行办理业务：")]),t._v(" "),a("ol",[a("li",[t._v("取号排队")]),t._v(" "),a("li",[t._v("办理具体现金/转账/企业/个人/理财业务")]),t._v(" "),a("li",[t._v("给银行工作人员评分")])]),t._v(" "),a("h3",{attrs:{id:"模板方法模式介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式介绍"}},[t._v("#")]),t._v(" "),a("strong",[t._v("模板方法模式介绍：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("模板方法模式是编程中经常用得到模式。它定义了一个操作中的算法骨架，将某些步骤延迟到子类中实现。这样，新的子类可以在不改变一个算法结构的前提下重新定义该算法的某些特定步骤。")])])]),t._v(" "),a("p",[a("strong",[t._v("核心：")])]),t._v(" "),a("p",[t._v("处理某个流程的代码已经都具备，但是其中某个节点的代码暂时不能确定。因此，我们采用工厂方法模式，将这个节点的代码实现转移给子类完成。"),a("strong",[t._v("即")]),t._v("**：处理步骤父类中定义好，具体实现延迟到子类中定义**")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/7BbvEqxfy9I2Zm5.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("什么时候用到模板方法模式：")])]),t._v(" "),a("ul",[a("li",[t._v("实现一个算法时，整体步骤很固定。但是，某些部分易变。易变部分可以抽象成出来，供子类实现。")])]),t._v(" "),a("h3",{attrs:{id:"状态模式-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态模式-state"}},[t._v("#")]),t._v(" "),a("strong",[t._v("状态模式 state")])]),t._v(" "),a("p",[a("strong",[t._v("场景：")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("电梯的运行")]),t._v(" "),a("ol",[a("li",[t._v("维修、正常、自动关门、自动开门、向上运行、向下运行、消防状态")])])]),t._v(" "),a("li",[a("strong",[t._v("红绿灯")]),t._v(" "),a("ol",[a("li",[t._v("红灯、黄灯、绿灯")])])]),t._v(" "),a("li",[a("strong",[t._v("企业或政府系统")]),t._v(" "),a("ol",[a("li",[t._v("公文的审批状态--\x3e报销单据审批状态--\x3e假条审批")])])]),t._v(" "),a("li",[a("strong",[t._v("网上购物时，订单的状态")]),t._v(" "),a("ol",[a("li",[t._v("下单--\x3e已付款--\x3e已发货--\x3e送货中--\x3e已收货")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/LBEDeh7uzkjdFr4.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("核心：")])]),t._v(" "),a("ul",[a("li",[t._v("用于解决系统中复杂对象的状态转换以及不同状态下行为的封装问题")])]),t._v(" "),a("p",[a("strong",[t._v("结构：")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Context环境类:")]),t._v(" "),a("ul",[a("li",[t._v("环境类中维护一个State对象，他是定义了当前的状态。")])])]),t._v(" "),a("li",[a("strong",[t._v("State抽象状态类:")])]),t._v(" "),a("li",[a("strong",[t._v("ConcreteState具体状态类:")]),t._v(" "),a("ul",[a("li",[t._v("每一个类封装了一个状态对应的行为")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/Hv6aokD3gW1lXwZ.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"观察者模式-observer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式-observer"}},[t._v("#")]),t._v(" "),a("strong",[t._v("观察者模式 Observer")])]),t._v(" "),a("p",[a("strong",[t._v("场景：")])]),t._v(" "),a("ol",[a("li",[t._v("聊天室程序的创建。服务器创建好后，A,B,C三个客户端连上来公开聊天。A向服务器发送数据，服务器端聊天数据改变。我们希望将这些聊天数据分别发给其他在线的客户。也就是说，每个客户端需要更新服务器端得数据。")]),t._v(" "),a("li",[t._v("网站上，很多人订阅了”java主题”的新闻。当有这个主题新闻时，就会将这些新闻发给所有订阅的人。")]),t._v(" "),a("li",[t._v("大家一起玩CS游戏时，服务器需要将每个人的方位变化发给所有的客户。")])]),t._v(" "),a("p",[a("strong",[t._v("上面这些场景，我们都可以使用观察者模式来处理。我们可以把多个订阅者、客户称之为观察者； 需要同步给多个订阅者的数据封装到对象中，称之为目标。")])]),t._v(" "),a("p",[a("strong",[t._v("核心：")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/mZKakxhoiVyEUvP.png",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/21XmdMtu8C7RoHF.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("JAVASE提供了java.util.Observable和java.util.Observer来实现观察者模式")])]),t._v(" "),a("h3",{attrs:{id:"备忘录模式-memento"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#备忘录模式-memento"}},[t._v("#")]),t._v(" "),a("strong",[t._v("备忘录模式 memento")])]),t._v(" "),a("p",[a("strong",[t._v("场景：")])]),t._v(" "),a("ol",[a("li",[t._v("录入大批人员资料。正在录入当前人资料时，发现上一个人录错了，此时需要恢复上一个人的资料，再进行修改。")]),t._v(" "),a("li",[t._v("Word文档编辑时，忽然电脑死机或断电，再打开时，可以看到word提示你恢复到以前的文档")]),t._v(" "),a("li",[t._v("管理系统中，公文撤回功能。公文发送出去后，想撤回来。")])]),t._v(" "),a("p",[a("strong",[t._v("核心")])]),t._v(" "),a("p",[t._v("就是保存某个对象内部状态的拷贝，这样以后就可以将该对象恢复到原先的状态。")]),t._v(" "),a("p",[a("strong",[t._v("结构：")])]),t._v(" "),a("ul",[a("li",[t._v("源发器类Originator")]),t._v(" "),a("li",[t._v("备忘录类Memento")]),t._v(" "),a("li",[t._v("负责人类CareTaker")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/VFUDE6dyXKPhwYI.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("负责人类")])]),t._v(" "),a("ul",[a("li",[t._v("负责保存好的备忘录对象。")]),t._v(" "),a("li",[t._v("可以通过增加容器，设置多个“备忘点”")])]),t._v(" "),a("p",[a("strong",[t._v("备忘点较多时：")])]),t._v(" "),a("p",[t._v("将备忘录压栈")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CareTaker")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Memento")]),t._v(" memento"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stack")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Memento")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" stack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Stack")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Memento")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("将多个备忘录对象，序列化和持久化")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/11/18/WfkvRI6GSg2oO43.png",alt:""}})])])}),[],!1,null,null,null);s.default=v.exports}}]);